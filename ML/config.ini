;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[data]
; exchange: crytocurrency exchange for downloading data of any symbol
; Options: binance, okx, metatrader
exchange = binance

; symbols: name of cryptocurrencies
; binance, okx Options: btc1, eth, doge, matic, sol, bch, oneinch, ltc, eos, avax, atom, mkr, comp, uni, snx, aave, crv, yfi, etc, ada, dot, algo, sushi
; metatrader Options: EURUSD, GBPUSD, USDJPY, USDCHF, AUDUSD, USDCAD, NZDUSD, EURGBP, EURJPY, GBPJPY, EURCHF, GBPCHF, EURCAD, AUDJPY, AUDCAD, AUDNZD, EURAUD, GBPAUD, GBPCAD, NZDJPY, USDHKD, USDNOK, USDRUB, USDSEK, USDSGD, USDZAR, USDTRY, USDPLN, USDMXN, USDCNH, USDCZK, USDHUF, USDILS, USDTHB, USDIDR, USDMYR, USDPHP, USDTWD, USDINR, EURHKD, EURNOK, EURRUB, EURSEK, EURSGD, EURZAR, EURTRY, EURPLN, EURMXN, EURCNH, EURCZK, EURHUF, EURILS, EURTHB, EURIDR, EURMYR, EURPHP, EURTWD, EURINR, GBPDKK, GBPNOK, GBPRUB, GBPSEK, GBPSGD, GBPZAR, GBPTRY, GBPPLN, GBPMXN, GBPCNH, GBPCZK, GBPHUF, GBPILS, GBPTHB, GBPIDR, GBPMYR, GBPPHP, GBPTWD, GBPINR, AUDHKD, AUDNOK, AUDRUB, AUDSEK, AUDSGD, AUDZAR, AUDTRY, AUDPLN, AUDMXN, AUDCNH, AUDCZK, AUDHUF, AUDILS, AUDTHB, AUDIDR, AUDMYR, AUDPHP, AUDTWD, AUDINR, CADHKD, CADNOK, CADRUB, CADSEK, CADSGD, CADZAR, CADTRY, CADPLN, CADMXN, CADCNH, CADCZK, CADHUF, CADILS, CADTHB, CADIDR, CADMYR, CADPHP, CADTWD, CADINR, NZDHKD, NZDNOK, NZDRUB, NZDSEK, NZDSGD, NZDZAR, NZDTRY, NZDPLN, NZDMXN, NZDCNH, NZDCZK, NZDHUF, NZDILS, NZDTHB, NZDIDR, NZDMYR, NZDPHP, NZDTWD, NZDINR
; Format: Comma-separated list
symbols = eth

; time_horizon: time horizons for which data is required
; Options: 10m, 20m, ..., 1h, 2h, ... | m (minutes) OR h (hours)
; Format: Comma-separated list
time_horizons = 24h

; start_date: download data for the specified symbols from this date onwards
; Format: Year-Month-Date
start_date = 2022-01-01

; end_date: download data for the specified symbols until this date
; Options: date (according to the below format) OR now (to download the data until the run minute)
; Format: Year-Month-Date
end_date = 2024-06-01

; fill_missing_method: methods for filling the missing downloaded data
; Options: ffill (forward fill), bfill (backward fill), interpolate (interpolation)
fill_missing_method = interpolate

; interpolation_method: interpolation method used for interpolating the missing downloaded data | if fill_missing_method = interpolate, then it is used
; Options: linear, time, index, nearest, polynomial, spline, piecewise_polynomial, akima, cubic, barycentric, krogh 
interpolation_method = linear

; fill_zero_volume: fill zero volume, useful if using log difference transformation
; Options: ffill (forward fill), bfill (backward fill), none (no change in volume where zero)
fill_zero_volume = ffill

; retries: in case of an exception, how many times should the program retry to download the data
; Format: int
retries = 5  

; retry_delay: delay between each retry in seconds
; Format: int
retry_delay = 10

; override_existing_data: whether to overrise existing data or not
override_existing_data = False


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[train]
; models_to_train: models to be trained using train.py
; Options: abr (AdaBoostRegressor), etr (ExtraTreeRegressor), mlpr (MLPRegressor), bnbc (BernoulliNB), knc (KNeighborsClassifier), svc (SVC), tft (Temporal Fusion Transformer (TFT)), tide (Time-series Dense Encoder (TiDE)), nhits (Neural Hierarchical Interpolation for Time Series Forecasting (N-HiTS)), brnn (Block Recurrent Neural Networks (BlockRNN))
; Format: Comma-separated list
models_to_train = abr, etr, bnbc
; abr, etr, mlpr, sgdr, ardr, bnbc, knc, svc, brnn, tide, nhits, tcn, tm
; train_split_percent: percentage of the data used for train, sum of all splits should be equal to 100
; Format: float
train_split_percent = 75.0

; backtest_split_percent: percentage of the data used for backtest, sum of all splits should be equal to 100
; Format: float
backtest_split_percent = 15.0 

; forwardtest_split_percent: percentage of the data used for forwardtest, sum of all splits should be equal to 100
; Format: float
forwardtest_split_percent = 10.0 

; optuna_trials: hyperparameters search trials for each learner
; Format: int
; optuna_trials = 2
optuna_trials_per_model = {"abr": 5, "etr": 5, "mlpr": 5, "sgdr": 5, "ardr": 5, "bnbc": 5, "knc": 5, "svc": 2, "brnn": 2, "tft": 2, "tide": 5, "nhits": 2, "tcn": 2, "tm": 2}
; optuna_trials_per_model = {"abr": 10, "etr": 10, "mlpr": 10, "sgdr": 10, "ardr": 10, "bnbc": 10, "knc": 10, "svc": 10, "brnn": 10, "tft": 10, "tide": 10, "nhits": 10, "tcn": 10, "tm": 10}

; optimisation_metric: 
; Options: model_accuracy, pnl_accuracy, pnl, balance, r2, sharpe, sortino, drawdown, win_loss, recovery_factor
optimisation_metric = model_accuracy

; use_gpu: whether to use GPU for training or not
; Format: bool
use_gpu = false

; find_best_features: use RF regressors and cross validation with optuna to find the best features  
; Format: bool
find_best_features = false



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[backtest]

; starting_balance: balance in USD with which backtest will be started
; Format: float
starting_balance = 1000

; take_profit: take profit in percentage, e.g., 4 means if the current position profit is 4% then it takes the profit and close the position
; Format: float
take_profit = 100

; stop_loss:  stop loss in percentage, e.g., 2 means if the current position loss is 2% then it takes the loss and close the position
; Format: float
stop_loss = 100

; buy_after_minutes: this will help replicating the real world scenario of going into position
; Format: int
buy_after_minutes = 0

; transaction_fee: transaction fee percentage of each transaction
; Format: float
transaction_fee = 0.05

; leverage: leverage for every new transaction
; Format: float
leverage = 1

; slippage: slippage percentage to be subtracted in every transaction to create more realistic scenarios
; Format: float
slippage = 0.0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[models_selection]

; metric used for selection of models, preceded by either bt for backtest, ft for forwardtest, metrics can be seen in training_results.db
metric = ft_sharpe > 1 and ft_long_trades_pct > 45 and ft_short_trades_pct > 45 and ft_r2 > 0.9

; ; metric value used as a threshold for selection of models
; value = 1

; ; metric on backtest, forwardtest, or on both
; ; options: backtest, forwardtest, average
; duration = backtest

; whether to upload models and results or not
upload_results = True

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[technical_indicators]

; enable: whether to use technical indicators or not (mentioned in this section)
; Format: bool
enable = true

; settings: can be used to control the input parameters of technical indicators
; Options: default or custom
settings = default 


; drop_correlated = true
; correlation_threshold = 0.9



; volume indicators

; ; Chaikin Money Flow (CMF) measures the amount of Money Flow Volume over a specific period.
; ; It combines both price and volume to view the strength of the stock's trend or confirm a breakout or breakdown.
; use_volume_cmf = true
; volume_cmf_window = 20  ; Window size for CMF, usually 20 or 21 days.

; ; Volume Weighted Average Price (VWAP) gives an average price a security has traded at throughout the day, based on both volume and price.
; ; It is important because it provides traders with insight into both the trend and value of a security.
; use_volume_vwap = true

; Money Flow Index (MFI) measures the rate at which money is flowing into or out of a security.
use_volume_mfi = true
volume_mfi_window = 14  ; Window size for MFI, default is 14.

; ; Negative Volume Index (NVI) measures the trend of a security based on changes in volume.
; use_volume_nvi = true

; ; Volume Weighted Moving Average (VWMA) calculates the moving average based on volume.
; use_volume_wma = true
; volume_wma_window = 14  ; Window size for VWMA, default is 14.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; volatility indicators
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Bollinger Bands Middle Band (BBM) is a volatility indicator.
use_volatility_bbm = true
volatility_bbm_window = 20  ; Window size for BBM, default is 20.
volatility_bbm_window_dev = 2  ; Number of standard deviations, default is 2.

; Bollinger Bands High Band (BBH) is a volatility indicator.
use_volatility_bbh = true
volatility_bbh_window = 20  ; Window size for BBH, default is 20.
volatility_bbh_window_dev = 2  ; Number of standard deviations, default is 2.

; Bollinger Bands Low Band (BBL) is a volatility indicator.
use_volatility_bbl = true
volatility_bbl_window = 20  ; Window size for BBL, default is 20.
volatility_bbl_window_dev = 2  ; Number of standard deviations, default is 2.

; Bollinger Bands Width (BBW) is a volatility indicator.
use_volatility_bbw = true
volatility_bbw_window = 20  ; Window size for BBW, default is 20.
volatility_bbw_window_dev = 2  ; Number of standard deviations, default is 2.

; Bollinger Bands High Indicator (BBHI) is a volatility indicator (1.0 for high band crossover, otherwise 0.0).
use_volatility_bbhi = true
volatility_bbhi_window = 20  ; Window size for BBHI, default is 20.
volatility_bbhi_window_dev = 2  ; Number of standard deviations, default is 2.

; Bollinger Bands Low Indicator (BBLI) is a volatility indicator (1.0 for low band crossover, otherwise 0.0).
use_volatility_bbli = true
volatility_bbli_window = 20  ; Window size for BBLI, default is 20.
volatility_bbli_window_dev = 2  ; Number of standard deviations, default is 2.


; Keltner Channel Middle Band (KCC) is a volatility indicator.
use_volatility_kcc = true
volatility_kcc_window = 20  ; Window size for KCC, default is 20.
volatility_kcc_window_atr = 10  ; Window for Average True Range, default is 10.

; Keltner Channel High Band (KCH) is a volatility indicator.
use_volatility_kch = true
volatility_kch_window = 20  ; Window size for KCH, default is 20.
volatility_kch_window_atr = 10  ; Window for Average True Range, default is 10.

; Keltner Channel Low Band (KCL) is a volatility indicator.
use_volatility_kcl = true
volatility_kcl_window = 20  ; Window size for KCL, default is 20.
volatility_kcl_window_atr = 10  ; Window for Average True Range, default is 10.

; Keltner Channel Width (KCW) is a volatility indicator.
use_volatility_kcw = true
volatility_kcw_window = 20  ; Window size for KCW, default is 20.
volatility_kcw_window_atr = 10  ; Window for Average True Range, default is 10.

; Keltner Channel High Indicator (KCHI) is a volatility indicator (1.0 for high band crossover, otherwise 0.0).
use_volatility_kchi = true
volatility_kchi_window = 20  ; Window size for KCHI, default is 20.
volatility_kchi_window_atr = 10  ; Window for Average True Range, default is 10.

; Keltner Channel Low Indicator (KCLI) is a volatility indicator (1.0 for low band crossover, otherwise 0.0).
use_volatility_kcli = true
volatility_kcli_window = 20  ; Window size for KCLI, default is 20.
volatility_kcli_window_atr = 10  ; Window for Average True Range, default is 10.

; Donchian Channel Low Band (DCL) is a volatility indicator.
use_volatility_dcl = true
volatility_dcl_window = 20  ; Window size for DCL, default is 20.

; Donchian Channel High Band (DCH) is a volatility indicator.
use_volatility_dch = true
volatility_dch_window = 20  ; Window size for DCH, default is 20.

; Donchian Channel Middle Band (DCM) is a volatility indicator.
use_volatility_dcm = true
volatility_dcm_window = 20  ; Window size for DCM, default is 20.

; Donchian Channel Width (DCW) is a volatility indicator.
use_volatility_dcw = true
volatility_dcw_window = 20  ; Window size for DCW, default is 20.

; Donchian Channel Percentage (DCP) is a volatility indicator.
use_volatility_dcp = true
volatility_dcp_window = 20  ; Window size for DCP, default is 20.

; Average True Range (ATR) is a volatility indicator.
use_volatility_atr = true
volatility_atr_window = 14  ; Window size for ATR, default is 14.

; Ulcer Index (UI) is a volatility indicator.
use_volatility_ui = true
volatility_ui_window = 14  ; Window size for UI, default is 14.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; trend indicators
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Fast Simple Moving Average (SMA) is a trend indicator.
use_trend_sma_fast = true
trend_sma_fast_window = 12  ; Window size for Fast SMA, default is 12.

; Slow Simple Moving Average (SMA) is a trend indicator.
use_trend_sma_slow = true
trend_sma_slow_window = 26  ; Window size for Slow SMA, default is 26.

; Fast Exponential Moving Average (EMA) is a trend indicator.
use_trend_ema_fast = true
trend_ema_fast_window = 12  ; Window size for Fast EMA, default is 12.

; Slow Exponential Moving Average (EMA) is a trend indicator.
use_trend_ema_slow = true
trend_ema_slow_window = 26  ; Window size for Slow EMA, default is 26.

; ; Positive Vortex Indicator is a trend indicator.
; use_trend_vortex_ind_pos = true
; trend_vortex_ind_pos_window = 14  ; Window size for Positive Vortex Indicator, default is 14.

; ; Negative Vortex Indicator is a trend indicator.
; use_trend_vortex_ind_neg = true
; trend_vortex_ind_neg_window = 14  ; Window size for Negative Vortex Indicator, default is 14.

; ; Mass Index is a trend indicator.
; use_trend_mass_index = true
; trend_mass_index_window_fast = 9  ; Fast window size for Mass Index, default is 9.
; trend_mass_index_window_slow = 25  ; Slow window size for Mass Index, default is 25.

; ; Ichimoku Conversion Line is a trend indicator.
; use_trend_ichimoku_conv = true
; trend_ichimoku_conv_window1 = 9  ; Short window size for Ichimoku Conversion Line, default is 9.
; trend_ichimoku_conv_window2 = 26  ; Medium window size for Ichimoku Conversion Line, default is 26.


; ; Ichimoku Base Line is a trend indicator.
; use_trend_ichimoku_base = true
; trend_ichimoku_base_window1 = 9  ; Short window size for Ichimoku Base Line, default is 9.
; trend_ichimoku_base_window2 = 26  ; Medium window size for Ichimoku Base Line, default is 26.

; ; Ichimoku A Line (average of Conversion and Base Line) is a trend indicator.
; use_trend_ichimoku_a = true
; trend_ichimoku_a_window1 = 9  ; Short window size for Ichimoku A Line, default is 9.
; trend_ichimoku_a_window2 = 26  ; Medium window size for Ichimoku A Line, default is 26.

; ; Ichimoku B Line is a trend indicator.
; use_trend_ichimoku_b = true
; trend_ichimoku_b_window2 = 26  ; Medium window size for Ichimoku B Line, default is 26.
; trend_ichimoku_b_window3 = 52  ; Long window size for Ichimoku B Line, default is 52.

; ; Schaff Trend Cycle (STC) is a trend indicator.
; use_trend_stc = true
; trend_stc_window_slow = 50  ; Slow window size for STC, default is 50.
; trend_stc_window_fast = 23  ; Fast window size for STC, default is 23.
; trend_stc_cycle = 10  ; Cycle period for STC, default is 10.

; Average Directional Movement Index (ADX) is a trend indicator.
use_trend_adx = true
trend_adx_window = 14  ; Window size for ADX, default is 14.

; Positive Directional Indicator (+DI) part of ADX is a trend indicator.
use_trend_adx_pos = true
trend_adx_pos_window = 14  ; Window size for +DI, default is 14.

; Negative Directional Indicator (-DI) part of ADX is a trend indicator.
use_trend_adx_neg = true
trend_adx_neg_window = 14  ; Window size for -DI, default is 14.

; Aroon Up Indicator is a trend indicator.
use_trend_aroon_up = true
trend_aroon_up_window = 25  ; Window size for Aroon Up, default is 25.

; Aroon Down Indicator is a trend indicator.
use_trend_aroon_down = true
trend_aroon_down_window = 25  ; Window size for Aroon Down, default is 25.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; momentum
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Relative Strength Index (RSI) is a momentum indicator.
use_momentum_rsi = true
momentum_rsi_window = 14  ; Window size for RSI, default is 14.

; ; Stochastic RSI (Stoch RSI) is a momentum indicator.
; use_momentum_stoch_rsi = true
; momentum_stoch_rsi_window = 14  ; Window size for Stoch RSI, default is 14.
; momentum_stoch_rsi_smooth_window = 3  ; Smoothing window for Stoch RSI, default is 3.

; Stochastic RSI K is a momentum indicator.
use_momentum_stoch_rsi_k = true

; Stochastic RSI D is a momentum indicator.
use_momentum_stoch_rsi_d = true

; Ultimate Oscillator (UO) is a momentum indicator.
use_momentum_uo = true
momentum_uo_window1 = 7  ; First period for UO, default is 7.
momentum_uo_window2 = 14  ; Second period for UO, default is 14.
momentum_uo_window3 = 28  ; Third period for UO, default is 28.
momentum_uo_weight1 = 4.0  ; Weight for first period, default is 4.0.
momentum_uo_weight2 = 2.0  ; Weight for second period, default is 2.0.
momentum_uo_weight3 = 1.0  ; Weight for third period, default is 1.0.

; Stochastic Oscillator is a momentum indicator.
use_momentum_stoch = true
momentum_stoch_window = 14  ; Window size for Stoch, default is 14.

; Stochastic Oscillator Signal is a momentum indicator.
use_momentum_stoch_signal = true
momentum_stoch_signal_window = 3  ; Window size for Stoch Signal, default is 3.

; Kaufman's Adaptive Moving Average (KAMA) is a momentum indicator.
use_momentum_kama = true
momentum_kama_window = 10  ; Window size for KAMA, default is 10.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom candlestick patterns
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Engulfing Candle Pattern is a custom candlestick pattern detector.
use_engulfing_candle = true

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom divergence indicators
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; RSI Divergence is a custom divergence indicator.
use_rsi_divergence = true
rsi_divergence_rsi_window = 14  ; RSI window for divergence detection, default is 14.
rsi_divergence_price_window = 14  ; Price change window for divergence detection, default is 14.

; On-Balance Volume (OBV) Divergence is a custom divergence indicator.
use_obv_divergence = true
obv_divergence_price_window = 14  ; Price change window for divergence detection, default is 14.
obv_divergence_obv_window = 14  ; OBV window for divergence detection, default is 14.